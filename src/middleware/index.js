//TODO - generated by justbuild-express-creator
// 필요시 수정해서 사용

const {apiCall, router} = require("../lib");

/** 사용자 정보를 불러오는 메서드
 *
 * @param token
 * @param refreshToken
 * @param isRetry
 * @return {Promise<{userInfo: *|null, token: *, refreshToken: *}|*|undefined>}
 */
async function fetchUserInfoByReq({token, refreshToken}, isRetry = false) {
  try {
    const apiRes = await apiCall({
      token: token,
      url: '/auth/v1/admin/info'
    });

    return {
      userInfo: apiRes ? apiRes.data : null,
      token: token,
      refreshToken: refreshToken
    };

  } catch (e) {
    // 리프레시도 수행한다.
    if (!isRetry && e.response?.status === 401) {
      const refreshRes = await apiCall({
        token: token,
        url: '/auth/v1/admin/refresh',
        data: {
          refreshToken
        },
        method: 'put',
      });

      // 재귀적으로 다시 호출한다.
      return await fetchUserInfoByReq({
        token: refreshRes.data.token,
        refreshToken: refreshRes.data.refreshToken
      }, true);
    }

    throw e;
  }
}

exports.preHandler = async (req, res, next) => {
  if (req?.cookies?.token) {
    res.cookie('token', req.cookies.token);

    try {
      // 사용자 정보 불러오기
      const {userInfo, token, refreshToken} = await fetchUserInfoByReq({
        token: req.cookies.token,
        refreshToken: req.cookies.refreshToken
      });

      // 토큰을 리프레시 토큰을 쿠키에 저장
      res.cookie('token', token);
      res.cookie('refreshToken', refreshToken);

      req.token = token;
      req.user = userInfo;

    } catch (e) {
      console.error("preHandler :: ", e);
      delete req.cookies.token;
      delete req.cookies.refreshToken;
      res.clearCookie('token');
      res.clearCookie('refreshToken');

      res.redirect('/login');
    }


  } else {
    if (req.originalUrl !== '/login') {
      console.log(req.originalUrl);
      res.redirect('/login');
      return;
    }
  }

  // 공통 파라미터를 지정
  router.setCommonParameter(req, res);

  next();
}


exports.exceptionMiddleware = require('./exceptionHandler');